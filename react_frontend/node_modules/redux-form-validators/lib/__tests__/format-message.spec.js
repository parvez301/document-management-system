'use strict';

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _helpers = require('../helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('formatMessage', function () {
  it('should return the default value or id', function () {
    _assert2.default.equal('foo', (0, _helpers.formatMsg)({ defaultMessage: 'foo', id: 'bar' }));
    _assert2.default.equal('bar', (0, _helpers.formatMsg)({ id: 'bar' }));
  });
  it('should handle FormattedMessage obj', function () {
    _assert2.default.equal('foo', (0, _helpers.formatMsg)({ props: { defaultMessage: 'foo', id: 'bar' } }));
  });
  it('should replace the vars', function () {
    _assert2.default.equal('foo 1 2', (0, _helpers.formatMsg)({ defaultMessage: 'foo {bar} {foobar}', values: { bar: 1, foobar: 2 } }));
    _assert2.default.equal('foo 1', (0, _helpers.formatMsg)({ defaultMessage: 'foo {count, number}', values: { count: 1 } }));
    _assert2.default.equal('foo 1', (0, _helpers.formatMsg)({ defaultMessage: 'foo {count}', values: { count: 1 } }));
  });
  it('should pluralize', function () {
    var msg = '{count, number} {count, plural, one {char} other {chars}}';
    _assert2.default.equal('0 chars', (0, _helpers.formatMsg)({ defaultMessage: msg, values: { count: 0 } }));
    _assert2.default.equal('1 char', (0, _helpers.formatMsg)({ defaultMessage: msg, values: { count: 1 } }));
    _assert2.default.equal('9 chars', (0, _helpers.formatMsg)({ defaultMessage: msg, values: { count: 9 } }));
    _assert2.default.equal('1 char1 char', (0, _helpers.formatMsg)({ defaultMessage: msg + msg, values: { count: 1 } }));
  });
});