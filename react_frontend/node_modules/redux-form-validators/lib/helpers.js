'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_OPTIONS = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.regFormat = regFormat;
exports.prepare = prepare;
exports.trunc = trunc;
exports.isNumber = isNumber;
exports.formatMsg = formatMsg;
exports.prepareMsg = prepareMsg;
exports.toObjectMsg = toObjectMsg;
exports.memoize = memoize;

var _format = require('./format');

var _format2 = _interopRequireDefault(_format);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _messages = require('./messages');

var _messages2 = _interopRequireDefault(_messages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DEFAULT_OPTIONS = exports.DEFAULT_OPTIONS = {
  allowBlank: false,
  urlProtocols: ['http', 'https'],
  dateFormat: 'yyyy-mm-dd', // ISO
  dateYmd: 'ymd',
  accept: ['1', 'true'],
  caseSensitive: true // confirmation, inclusion, exclusion
};

function regFormat(func, messageType) {
  return memoize(function (options) {
    options = options || {};
    var msg = options.msg || options.message;

    return prepare(options['if'], options.unless, options.allowBlank, function (value) {
      if (!value.match(func(options))) {
        return _index2.default.formatMessage(prepareMsg(msg, messageType));
      }
    });
  });
}

function prepare(ifCond, unlessCond, allowBlank, func) {
  return function (value) {
    var allValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    value = null == value ? '' : '' + value;

    if ((null != allowBlank ? allowBlank : _index2.default.defaultOptions.allowBlank) && !value.trim()) {
      return;
    }
    if (('function' !== typeof ifCond || ifCond(allValues, value)) && ('function' !== typeof unlessCond || !unlessCond(allValues, value))) {
      return func(value, allValues);
    }
  };
}

function trunc(num) {
  /* istanbul ignore next */
  return Math.trunc ? Math.trunc(num) : num < 0 ? Math.ceil(num) : Math.floor(num);
}

function isNumber(num) {
  return !isNaN(num) && '' !== ('' + num).trim();
}

var pluralRules = {
  0: /zero\s*\{(.*?)\}/,
  1: /one\s*\{(.*?)\}/,
  other: /other\s*\{(.*?)\}/
};

var TEMPLATE_REG = /\{([^{}]*\{[^{}]*\}[^{}]*)+\}|\{(.*?)\}/g;

function formatMsg(msg) {
  if (msg.props) {
    msg = msg.props;
  }
  var text = msg.defaultMessage || msg.id || '';
  return !msg.values ? text : text.replace(TEMPLATE_REG, function (content) {
    var parts = content.slice(1, -1).split(',');
    var count = msg.values[parts[0]];
    if (parts.length <= 2) {
      return null == count ? '' : count;
    }
    var plural = parts[2].trim();
    var rules = pluralRules[+count];
    var result = void 0;
    if (rules && (result = plural.match(rules))) {
      return result[1];
    }
    return (plural.match(pluralRules.other) || [])[1] || '';
  });
}

function prepareMsg(msg, type, values) {
  if (null == msg) {
    return Object.assign({}, _messages2.default[type], { values: values });
  }
  if (HAS_PROP.call(msg, 'props') && isReactElement(msg)) {
    msg = msg.props;
  }
  if (null != msg[type]) {
    msg = msg[type];
  }
  if (isObject(msg)) {
    if (HAS_PROP.call(msg, 'id') || HAS_PROP.call(msg, 'defaultMessage')) {
      return Object.assign({}, msg, { values: values });
    }
    return Object.assign({}, _messages2.default[type], { values: values });
  }
  return { id: msg, defaultMessage: msg, values: values };
}

function toObjectMsg(msg) {
  if (null == msg) return null;
  return isObject(msg) ? msg : { id: msg, defaultMessage: msg };
}

function memoize(func) {
  if (!func.cache) {
    func.cache = {};
  }
  return function (options) {
    var key = stringify(options);
    return HAS_PROP.call(func.cache, key) ? func.cache[key] : func.cache[key] = func(options);
  };
}

// private
var HAS_PROP = {}.hasOwnProperty;
var TO_STRING = {}.toString;

function stringify(options) {
  var arr = [];
  var value = void 0;
  for (var k in options) {
    if (HAS_PROP.call(options, k)) {
      value = options[k];
      arr.push(k, isReactElement(value) ? stringify(value.props) : isObject(value) ? stringify(value) : value.toString());
    }
  }
  return JSON.stringify(arr);
}

function isReactElement(object) {
  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && '$$typeof' in object;
}

function isObject(obj) {
  return 'object' === (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) && '[object Object]' === TO_STRING.call(obj) && null !== obj;
}