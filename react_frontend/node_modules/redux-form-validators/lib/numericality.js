'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _helpers = require('./helpers');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var numericality = (0, _helpers.memoize)(function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      int = _ref.int,
      integer = _ref.integer,
      even = _ref.even,
      odd = _ref.odd,
      equal = _ref['='],
      equalTo = _ref.equalTo,
      diff = _ref['!='],
      otherThan = _ref.otherThan,
      greater = _ref['>'],
      greaterThan = _ref.greaterThan,
      less = _ref['<'],
      lessThan = _ref.lessThan,
      greaterOrEqual = _ref['>='],
      greaterThanOrEqualTo = _ref.greaterThanOrEqualTo,
      lessOrEqual = _ref['<='],
      lessThanOrEqualTo = _ref.lessThanOrEqualTo,
      message = _ref.message,
      msg = _ref.msg,
      ifCond = _ref['if'],
      unless = _ref.unless,
      allowBlank = _ref.allowBlank;

  msg = msg || message;

  int = int || integer;
  equal = (0, _helpers.isNumber)(equal) ? equal : equalTo;
  diff = (0, _helpers.isNumber)(diff) ? diff : otherThan;
  greater = (0, _helpers.isNumber)(greater) ? greater : greaterThan;
  less = (0, _helpers.isNumber)(less) ? less : lessThan;
  greaterOrEqual = (0, _helpers.isNumber)(greaterOrEqual) ? greaterOrEqual : greaterThanOrEqualTo;
  lessOrEqual = (0, _helpers.isNumber)(lessOrEqual) ? lessOrEqual : lessThanOrEqualTo;

  return (0, _helpers.prepare)(ifCond, unless, allowBlank, function (value) {
    if (!(0, _helpers.isNumber)(value)) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'notANumber'));
    }
    if (int && +value % 1) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'notANumber'));
    }
    if ((0, _helpers.isNumber)(equal) && +value !== +equal) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'equalTo', { count: equal }));
    }
    if ((0, _helpers.isNumber)(diff) && +value === +diff) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'otherThan', { count: diff }));
    }
    if ((0, _helpers.isNumber)(greater) && +value <= +greater) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'greaterThan', { count: greater }));
    }
    if ((0, _helpers.isNumber)(greaterOrEqual) && +value < +greaterOrEqual) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'greaterThanOrEqualTo', { count: greaterOrEqual }));
    }
    if ((0, _helpers.isNumber)(less) && +value >= +less) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'lessThan', { count: less }));
    }
    if ((0, _helpers.isNumber)(lessOrEqual) && +value > +lessOrEqual) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'lessThanOrEqualTo', { count: lessOrEqual }));
    }
    if (even && (0, _helpers.trunc)(+value) % 2) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'even'));
    }
    if (odd && !((0, _helpers.trunc)(+value) % 2)) {
      return _index2.default.formatMessage((0, _helpers.prepareMsg)(msg, 'odd'));
    }
  });
});

exports.default = numericality;